{
  "version": 4,
  "terraform_version": "0.13.6",
  "serial": 146,
  "lineage": "e1c567c0-81c9-bd0d-e2ca-6d89e587e38d",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_disk",
      "name": "nifi-disk-",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-05-26T15:33:59.814-07:00",
            "description": "",
            "disk_encryption_key": [],
            "id": "projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-1",
            "image": "",
            "label_fingerprint": "a6HI36FuYIQ=",
            "labels": {
              "environment": "dev"
            },
            "last_attach_timestamp": "2022-05-26T15:35:18.097-07:00",
            "last_detach_timestamp": "",
            "name": "nifi-disk-1",
            "physical_block_size_bytes": 4096,
            "project": "safshari-sandbox",
            "provisioned_iops": 0,
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-1",
            "size": 1000,
            "snapshot": "",
            "source_image_encryption_key": [],
            "source_image_id": "",
            "source_snapshot_encryption_key": [],
            "source_snapshot_id": "",
            "timeouts": null,
            "type": "pd-ssd",
            "users": [
              "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-1"
            ],
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-05-26T15:33:59.873-07:00",
            "description": "",
            "disk_encryption_key": [],
            "id": "projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-2",
            "image": "",
            "label_fingerprint": "a6HI36FuYIQ=",
            "labels": {
              "environment": "dev"
            },
            "last_attach_timestamp": "2022-05-26T15:35:17.888-07:00",
            "last_detach_timestamp": "",
            "name": "nifi-disk-2",
            "physical_block_size_bytes": 4096,
            "project": "safshari-sandbox",
            "provisioned_iops": 0,
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-2",
            "size": 1000,
            "snapshot": "",
            "source_image_encryption_key": [],
            "source_image_id": "",
            "source_snapshot_encryption_key": [],
            "source_snapshot_id": "",
            "timeouts": null,
            "type": "pd-ssd",
            "users": [
              "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-2"
            ],
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-05-26T15:33:59.884-07:00",
            "description": "",
            "disk_encryption_key": [],
            "id": "projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-3",
            "image": "",
            "label_fingerprint": "a6HI36FuYIQ=",
            "labels": {
              "environment": "dev"
            },
            "last_attach_timestamp": "2022-05-26T15:35:17.996-07:00",
            "last_detach_timestamp": "",
            "name": "nifi-disk-3",
            "physical_block_size_bytes": 4096,
            "project": "safshari-sandbox",
            "provisioned_iops": 0,
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-3",
            "size": 1000,
            "snapshot": "",
            "source_image_encryption_key": [],
            "source_image_id": "",
            "source_snapshot_encryption_key": [],
            "source_snapshot_id": "",
            "timeouts": null,
            "type": "pd-ssd",
            "users": [
              "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-3"
            ],
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow-https",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "8443"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2022-05-26T15:34:31.588-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/safshari-sandbox/global/firewalls/allow-https",
            "log_config": [],
            "name": "allow-https",
            "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "priority": 1000,
            "project": "safshari-sandbox",
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/firewalls/allow-https",
            "source_ranges": [],
            "source_service_accounts": [],
            "source_tags": [
              "bastionhost"
            ],
            "target_service_accounts": [],
            "target_tags": [
              "nifi-host"
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow-internal",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "tcp"
              },
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "udp"
              },
              {
                "ports": [],
                "protocol": "icmp"
              }
            ],
            "creation_timestamp": "2022-05-26T15:34:53.396-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/safshari-sandbox/global/firewalls/allow-internal",
            "log_config": [],
            "name": "allow-internal",
            "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "priority": 1000,
            "project": "safshari-sandbox",
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/firewalls/allow-internal",
            "source_ranges": [
              "10.138.0.0/20"
            ],
            "source_service_accounts": [],
            "source_tags": [],
            "target_service_accounts": [],
            "target_tags": [],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "allow-ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "22"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2022-05-26T15:34:31.429-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/safshari-sandbox/global/firewalls/allow-ssh",
            "log_config": [],
            "name": "allow-ssh",
            "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "priority": 1000,
            "project": "safshari-sandbox",
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/firewalls/allow-ssh",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": [],
            "source_tags": [],
            "target_service_accounts": [],
            "target_tags": [
              "bastionhost",
              "nifi-ca",
              "nifi-host",
              "zookeeper"
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "bastionhost-allow-rdp",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "3389"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2022-05-26T15:34:31.199-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/safshari-sandbox/global/firewalls/bastionhost-allow-rdp",
            "log_config": [],
            "name": "bastionhost-allow-rdp",
            "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "priority": 1000,
            "project": "safshari-sandbox",
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/firewalls/bastionhost-allow-rdp",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": [],
            "source_tags": [],
            "target_service_accounts": [],
            "target_tags": [
              "bastionhost"
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "nifi",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [
              {
                "device_name": "nifi-disk-1",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-1"
              }
            ],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-1",
            "instance_id": "6463987463663499663",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-highcpu-16",
            "metadata": null,
            "metadata_fingerprint": "_OGGugIkJvg=",
            "metadata_startup_script": "      if [[ ! -f /opt/startup-script-finished.txt ]]\n      then \n        if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n          yum install /opt/unzip*.rpm -y \n        else \n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n          apt-get install /opt/unzip*.deb -y\n        fi\n      \n        mkdir -p /mnt/disks/nifi-repo\n        disk_name=\"/dev/$(basename $(readlink /dev/disk/by-id/google-nifi-disk-1))\"\n        mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard $disk_name\n        mount -o discard,defaults $disk_name /mnt/disks/nifi-repo\n        sleep 2\n        echo UUID=$(sudo blkid -s UUID -o value $disk_name) /mnt/disks/nifi-repo ext4 discard,defaults,nofail 0 2 | sudo tee -a /etc/fstab\n\n\n        NIFI_UID=10000\n        NIFI_GID=10000\n        groupadd -g ${NIFI_GID} nifi || groupmod -n nifi `getent group ${NIFI_GID} | cut -d: -f1` \\\n            \u0026\u0026 useradd --shell /bin/bash -u ${NIFI_UID} -g ${NIFI_GID} -m nifi \\\n            \u0026\u0026 mkdir -p /opt \\\n            \n        chown -R nifi:nifi /mnt/disks/nifi-repo\n        mkdir -p /usr/lib/jvm/tmp-jdk\n        gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n        cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n        rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n        cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n\n        chmod -R a+x  /usr/lib/jvm/\n        chown -R nifi:nifi /usr/lib/jvm/\n        su nifi -c 'echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc'\n        su nifi -c 'echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc'\n        \n        gsutil cp  gs://nifi-binaries-safshari/binaries/nifi-1.15.3-bin.zip /opt\n        unzip /opt/nifi-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-1.15.3-bin.zip\n\n        gsutil cp gs://nifi-binaries-safshari/binaries/nifi-toolkit-1.15.3-bin.zip /opt\n        unzip /opt/nifi-toolkit-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-toolkit-1.15.3-bin.zip\n\n        chown -R nifi:nifi /opt/*\n        find /opt -type f -iname \"*.sh\" -exec chmod +x {} \\;\n        \n        echo \"testing the connection\"\n        until nc -z nifi-ca 9443 \u003e/dev/null 2\u003e\u00261; do :; done\n        \n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /opt/nifi-1.15.3/conf \u0026\u0026 /opt/nifi-toolkit-1.15.3/bin/tls-toolkit.sh client  -c nifi-ca -t ThisPasswordIsNotSecure '\n        until  ls /opt/nifi-1.15.3/conf/config.json; do\n        sleep 1\n        done\n        KEYSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$' `\n        KEY_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyPassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n        TRUSTSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"trustStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/keystore.jks -storepass $KEYSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/truststore.jks -storepass $TRUSTSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -keypasswd  -alias nifi-key  -keystore  /opt/nifi-1.15.3/conf/keystore.jks -storepass testtesttest -keypass $KEY_PASSWORD -new testtesttest\n        prop_replace () {\n            sed -i -e \"s|^$1=.*$|$1=$2|\"  $3\n        }\n        NIFI_CONFIG_FILE=\"/opt/nifi-1.15.3/conf/nifi.properties\"\n        NIFI_STATE_FILE=\"/opt/nifi-1.15.3/conf/state-management.xml\"\n        NIFI_AUTHZ_FILE=\"//opt/nifi-1.15.3/conf/authorizers.xml\"\n        NIFI_BOOTSTRAP_FILE=\"//opt/nifi-1.15.3/conf/bootstrap.conf\"\n       \n        KEYSTORE_PASSWORD=testtesttest\n        KEY_PASSWORD=testtesttest\n        TRUSTSTORE_PASSWORD=testtesttest\n\n        prop_replace 'nifi.web.http.port'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.http.host'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.port'                \"${NIFI_WEB_HTTPS_PORT:-8443}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.host'                \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.remote.input.http.enabled'     'true'                                                         \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'      'nifi-zookeeper:2181'                               \"${NIFI_CONFIG_FILE}\"\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"nifi-zookeeper:2181\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n\n        prop_replace 'nifi.security.keystore'                       \"/opt/nifi-1.15.3/conf/keystore.jks\"       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystoreType'                   \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystorePasswd'                 \"${KEYSTORE_PASSWORD}\"                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keyPasswd'                      \"${KEY_PASSWORD}\"                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststore'                     \"/opt/nifi-1.15.3/conf/truststore.jks\"     \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststoreType'                 \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststorePasswd'               \"${TRUSTSTORE_PASSWORD}\"                                           \"${NIFI_CONFIG_FILE}\"\n        \n        prop_replace 'nifi.sensitive.props.key'                     'hggjgjgjggewzQjhajhfaf='                                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.login.identity.provider'   ''                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.authorizer'                'managed-authorizer'                                                \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.cluster.is.node'                         'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.protocol.is.secure'              'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.address'                    \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.protocol.port'              '9876'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'                'nifi-zookeeper:2181'                                    \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.flow.election.max.wait.time'     '30 sec'                                                            \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.flowfile.repository.directory'              '/mnt/disks/nifi-repo/flowfile_repository'                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.content.repository.directory.default'       '/mnt/disks/nifi-repo/content_repository'                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.directory.default'    '/mnt/disks/nifi-repo/provenance_repository'                        \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        #prop_replace 'nifi.queue.swap.threshold' '50000'                                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.max.storage.time' '7 days'                                                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.connection.timeout' '10 sec'                                                                       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.read.timeout' '10 sec'                                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'java.arg.2'              '-Xms4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n        prop_replace 'java.arg.3'              '-Xmx4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n         \n        sed -i -e 's|# nifi.security.identity.mapping.pattern.dn=.*|nifi.security.identity.mapping.pattern.dn=CN=(.*), OU=.*|'                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.value.dn=.*|nifi.security.identity.mapping.value.dn=$1|'                                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.transform.dn=NONE|nifi.security.identity.mapping.transform.dn=NONE|'                                              ${NIFI_CONFIG_FILE}\n        \n        sed -i -e 's|\u003cproperty name=\"Initial User Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial User Identity 0\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                  ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Initial Admin Identity\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial Admin Identity\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                    ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Node Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Node Identity 1\"\u003e'\"nifi-1\"'\u003c/property\u003e|'                              ${NIFI_AUTHZ_FILE}\n        \n        for i in $(seq 2 3); do\n            sed -i -e '/\u003cproperty name=\"Node Identity 1\"\u003e.*/a \u003cproperty name=\"Node Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n        for i in $(seq 1 3); do\n            sed -i -e '/\u003cproperty name=\"Initial User Identity 0\"\u003e.*/a \u003cproperty name=\"Initial User Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n\n        head -n -11 ${NIFI_AUTHZ_FILE} \u003e /tmp/authorizers.xml\n        echo '\u003c/authorizers\u003e' \u003e\u003e /tmp/authorizers.xml\n        mv /tmp/authorizers.xml ${NIFI_AUTHZ_FILE}\n        chown nifi:nifi ${NIFI_AUTHZ_FILE} \n       \n        tmp=\"\"\n        for i in $(seq 1 3); do\n            tmp+=nifi-zookeeper-$i:2181,\n        done\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e.*\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"$tmp\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n       \n        prop_replace 'nifi.zookeeper.connect.string'     \"$tmp\"                                                                                 \"${NIFI_CONFIG_FILE}\"\n  \n        gsutil -m cp -r gs://nifi-binaries-safshari/core-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/core-site.xml\n\n        gsutil -m cp -r gs://nifi-binaries-safshari/hdfs-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/hdfs-site.xml\n\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/flow.xml.gz /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/flow.xml.gz\n\n        gsutil -q stat gs://nifi-binaries-safshari/*.keytab\n        ret=$?\n        if [ $ret = 0 ];\n        then\n          gsutil -m cp -r gs://nifi-binaries-safshari/*.keytab /opt/nifi-1.15.3/conf\n          chown -R nifi:nifi /opt/nifi-1.15.3/conf/*.keytab\n        fi\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar /opt/nifi-1.15.3/lib/\n        chown -R nifi:nifi /opt/nifi-1.15.3/lib/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar\n\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh start'\n        sleep 1m\n        su nifi -c 'rm /opt/nifi-1.15.3/conf/authorizations.xml /opt/nifi-1.15.3/conf/users.xml'\n        touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n    \n      fi\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh restart'\n      \n",
            "min_cpu_platform": "",
            "name": "nifi-1",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.15",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-1",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform",
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "nifi-host"
            ],
            "tags_fingerprint": "7OGjTSZ4ELE=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_disk.nifi-disk-",
            "google_compute_instance.nifi-ca",
            "google_compute_instance.zookeeper",
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [
              {
                "device_name": "nifi-disk-2",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-2"
              }
            ],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-2"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-2",
            "instance_id": "4095108383382550927",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-highcpu-16",
            "metadata": null,
            "metadata_fingerprint": "2e-ZLpNebWY=",
            "metadata_startup_script": "      if [[ ! -f /opt/startup-script-finished.txt ]]\n      then \n        if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n          yum install /opt/unzip*.rpm -y \n        else \n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n          apt-get install /opt/unzip*.deb -y\n        fi\n      \n        mkdir -p /mnt/disks/nifi-repo\n        disk_name=\"/dev/$(basename $(readlink /dev/disk/by-id/google-nifi-disk-2))\"\n        mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard $disk_name\n        mount -o discard,defaults $disk_name /mnt/disks/nifi-repo\n        sleep 2\n        echo UUID=$(sudo blkid -s UUID -o value $disk_name) /mnt/disks/nifi-repo ext4 discard,defaults,nofail 0 2 | sudo tee -a /etc/fstab\n\n\n        NIFI_UID=10000\n        NIFI_GID=10000\n        groupadd -g ${NIFI_GID} nifi || groupmod -n nifi `getent group ${NIFI_GID} | cut -d: -f1` \\\n            \u0026\u0026 useradd --shell /bin/bash -u ${NIFI_UID} -g ${NIFI_GID} -m nifi \\\n            \u0026\u0026 mkdir -p /opt \\\n            \n        chown -R nifi:nifi /mnt/disks/nifi-repo\n        mkdir -p /usr/lib/jvm/tmp-jdk\n        gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n        cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n        rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n        cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n\n        chmod -R a+x  /usr/lib/jvm/\n        chown -R nifi:nifi /usr/lib/jvm/\n        su nifi -c 'echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc'\n        su nifi -c 'echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc'\n        \n        gsutil cp  gs://nifi-binaries-safshari/binaries/nifi-1.15.3-bin.zip /opt\n        unzip /opt/nifi-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-1.15.3-bin.zip\n\n        gsutil cp gs://nifi-binaries-safshari/binaries/nifi-toolkit-1.15.3-bin.zip /opt\n        unzip /opt/nifi-toolkit-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-toolkit-1.15.3-bin.zip\n\n        chown -R nifi:nifi /opt/*\n        find /opt -type f -iname \"*.sh\" -exec chmod +x {} \\;\n        \n        echo \"testing the connection\"\n        until nc -z nifi-ca 9443 \u003e/dev/null 2\u003e\u00261; do :; done\n        \n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /opt/nifi-1.15.3/conf \u0026\u0026 /opt/nifi-toolkit-1.15.3/bin/tls-toolkit.sh client  -c nifi-ca -t ThisPasswordIsNotSecure '\n        until  ls /opt/nifi-1.15.3/conf/config.json; do\n        sleep 1\n        done\n        KEYSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$' `\n        KEY_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyPassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n        TRUSTSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"trustStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/keystore.jks -storepass $KEYSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/truststore.jks -storepass $TRUSTSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -keypasswd  -alias nifi-key  -keystore  /opt/nifi-1.15.3/conf/keystore.jks -storepass testtesttest -keypass $KEY_PASSWORD -new testtesttest\n        prop_replace () {\n            sed -i -e \"s|^$1=.*$|$1=$2|\"  $3\n        }\n        NIFI_CONFIG_FILE=\"/opt/nifi-1.15.3/conf/nifi.properties\"\n        NIFI_STATE_FILE=\"/opt/nifi-1.15.3/conf/state-management.xml\"\n        NIFI_AUTHZ_FILE=\"//opt/nifi-1.15.3/conf/authorizers.xml\"\n        NIFI_BOOTSTRAP_FILE=\"//opt/nifi-1.15.3/conf/bootstrap.conf\"\n       \n        KEYSTORE_PASSWORD=testtesttest\n        KEY_PASSWORD=testtesttest\n        TRUSTSTORE_PASSWORD=testtesttest\n\n        prop_replace 'nifi.web.http.port'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.http.host'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.port'                \"${NIFI_WEB_HTTPS_PORT:-8443}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.host'                \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.remote.input.http.enabled'     'true'                                                         \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'      'nifi-zookeeper:2181'                               \"${NIFI_CONFIG_FILE}\"\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"nifi-zookeeper:2181\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n\n        prop_replace 'nifi.security.keystore'                       \"/opt/nifi-1.15.3/conf/keystore.jks\"       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystoreType'                   \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystorePasswd'                 \"${KEYSTORE_PASSWORD}\"                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keyPasswd'                      \"${KEY_PASSWORD}\"                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststore'                     \"/opt/nifi-1.15.3/conf/truststore.jks\"     \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststoreType'                 \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststorePasswd'               \"${TRUSTSTORE_PASSWORD}\"                                           \"${NIFI_CONFIG_FILE}\"\n        \n        prop_replace 'nifi.sensitive.props.key'                     'hggjgjgjggewzQjhajhfaf='                                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.login.identity.provider'   ''                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.authorizer'                'managed-authorizer'                                                \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.cluster.is.node'                         'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.protocol.is.secure'              'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.address'                    \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.protocol.port'              '9876'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'                'nifi-zookeeper:2181'                                    \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.flow.election.max.wait.time'     '30 sec'                                                            \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.flowfile.repository.directory'              '/mnt/disks/nifi-repo/flowfile_repository'                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.content.repository.directory.default'       '/mnt/disks/nifi-repo/content_repository'                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.directory.default'    '/mnt/disks/nifi-repo/provenance_repository'                        \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        #prop_replace 'nifi.queue.swap.threshold' '50000'                                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.max.storage.time' '7 days'                                                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.connection.timeout' '10 sec'                                                                       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.read.timeout' '10 sec'                                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'java.arg.2'              '-Xms4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n        prop_replace 'java.arg.3'              '-Xmx4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n         \n        sed -i -e 's|# nifi.security.identity.mapping.pattern.dn=.*|nifi.security.identity.mapping.pattern.dn=CN=(.*), OU=.*|'                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.value.dn=.*|nifi.security.identity.mapping.value.dn=$1|'                                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.transform.dn=NONE|nifi.security.identity.mapping.transform.dn=NONE|'                                              ${NIFI_CONFIG_FILE}\n        \n        sed -i -e 's|\u003cproperty name=\"Initial User Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial User Identity 0\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                  ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Initial Admin Identity\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial Admin Identity\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                    ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Node Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Node Identity 1\"\u003e'\"nifi-1\"'\u003c/property\u003e|'                              ${NIFI_AUTHZ_FILE}\n        \n        for i in $(seq 2 3); do\n            sed -i -e '/\u003cproperty name=\"Node Identity 1\"\u003e.*/a \u003cproperty name=\"Node Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n        for i in $(seq 1 3); do\n            sed -i -e '/\u003cproperty name=\"Initial User Identity 0\"\u003e.*/a \u003cproperty name=\"Initial User Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n\n        head -n -11 ${NIFI_AUTHZ_FILE} \u003e /tmp/authorizers.xml\n        echo '\u003c/authorizers\u003e' \u003e\u003e /tmp/authorizers.xml\n        mv /tmp/authorizers.xml ${NIFI_AUTHZ_FILE}\n        chown nifi:nifi ${NIFI_AUTHZ_FILE} \n       \n        tmp=\"\"\n        for i in $(seq 1 3); do\n            tmp+=nifi-zookeeper-$i:2181,\n        done\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e.*\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"$tmp\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n       \n        prop_replace 'nifi.zookeeper.connect.string'     \"$tmp\"                                                                                 \"${NIFI_CONFIG_FILE}\"\n  \n        gsutil -m cp -r gs://nifi-binaries-safshari/core-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/core-site.xml\n\n        gsutil -m cp -r gs://nifi-binaries-safshari/hdfs-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/hdfs-site.xml\n\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/flow.xml.gz /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/flow.xml.gz\n\n        gsutil -q stat gs://nifi-binaries-safshari/*.keytab\n        ret=$?\n        if [ $ret = 0 ];\n        then\n          gsutil -m cp -r gs://nifi-binaries-safshari/*.keytab /opt/nifi-1.15.3/conf\n          chown -R nifi:nifi /opt/nifi-1.15.3/conf/*.keytab\n        fi\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar /opt/nifi-1.15.3/lib/\n        chown -R nifi:nifi /opt/nifi-1.15.3/lib/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar\n\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh start'\n        sleep 1m\n        su nifi -c 'rm /opt/nifi-1.15.3/conf/authorizations.xml /opt/nifi-1.15.3/conf/users.xml'\n        touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n    \n      fi\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh restart'\n      \n",
            "min_cpu_platform": "",
            "name": "nifi-2",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.16",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-2",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform",
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "nifi-host"
            ],
            "tags_fingerprint": "7OGjTSZ4ELE=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_disk.nifi-disk-",
            "google_compute_instance.nifi-ca",
            "google_compute_instance.zookeeper",
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [
              {
                "device_name": "nifi-disk-3",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-disk-3"
              }
            ],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-3"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-3",
            "instance_id": "5639493879024433551",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-highcpu-16",
            "metadata": null,
            "metadata_fingerprint": "w7hz9l21gL0=",
            "metadata_startup_script": "      if [[ ! -f /opt/startup-script-finished.txt ]]\n      then \n        if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n          yum install /opt/unzip*.rpm -y \n        else \n          gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n          apt-get install /opt/unzip*.deb -y\n        fi\n      \n        mkdir -p /mnt/disks/nifi-repo\n        disk_name=\"/dev/$(basename $(readlink /dev/disk/by-id/google-nifi-disk-3))\"\n        mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard $disk_name\n        mount -o discard,defaults $disk_name /mnt/disks/nifi-repo\n        sleep 2\n        echo UUID=$(sudo blkid -s UUID -o value $disk_name) /mnt/disks/nifi-repo ext4 discard,defaults,nofail 0 2 | sudo tee -a /etc/fstab\n\n\n        NIFI_UID=10000\n        NIFI_GID=10000\n        groupadd -g ${NIFI_GID} nifi || groupmod -n nifi `getent group ${NIFI_GID} | cut -d: -f1` \\\n            \u0026\u0026 useradd --shell /bin/bash -u ${NIFI_UID} -g ${NIFI_GID} -m nifi \\\n            \u0026\u0026 mkdir -p /opt \\\n            \n        chown -R nifi:nifi /mnt/disks/nifi-repo\n        mkdir -p /usr/lib/jvm/tmp-jdk\n        gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n        cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n        rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n        cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n\n        chmod -R a+x  /usr/lib/jvm/\n        chown -R nifi:nifi /usr/lib/jvm/\n        su nifi -c 'echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc'\n        su nifi -c 'echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc'\n        \n        gsutil cp  gs://nifi-binaries-safshari/binaries/nifi-1.15.3-bin.zip /opt\n        unzip /opt/nifi-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-1.15.3-bin.zip\n\n        gsutil cp gs://nifi-binaries-safshari/binaries/nifi-toolkit-1.15.3-bin.zip /opt\n        unzip /opt/nifi-toolkit-1.15.3-bin.zip -d /opt\n        rm /opt/nifi-toolkit-1.15.3-bin.zip\n\n        chown -R nifi:nifi /opt/*\n        find /opt -type f -iname \"*.sh\" -exec chmod +x {} \\;\n        \n        echo \"testing the connection\"\n        until nc -z nifi-ca 9443 \u003e/dev/null 2\u003e\u00261; do :; done\n        \n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /opt/nifi-1.15.3/conf \u0026\u0026 /opt/nifi-toolkit-1.15.3/bin/tls-toolkit.sh client  -c nifi-ca -t ThisPasswordIsNotSecure '\n        until  ls /opt/nifi-1.15.3/conf/config.json; do\n        sleep 1\n        done\n        KEYSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$' `\n        KEY_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"keyPassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n        TRUSTSTORE_PASSWORD=`cat /opt/nifi-1.15.3/conf/config.json | grep -o '\"trustStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/keystore.jks -storepass $KEYSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -storepasswd -new testtesttest -keystore /opt/nifi-1.15.3/conf/truststore.jks -storepass $TRUSTSTORE_PASSWORD\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -keypasswd  -alias nifi-key  -keystore  /opt/nifi-1.15.3/conf/keystore.jks -storepass testtesttest -keypass $KEY_PASSWORD -new testtesttest\n        prop_replace () {\n            sed -i -e \"s|^$1=.*$|$1=$2|\"  $3\n        }\n        NIFI_CONFIG_FILE=\"/opt/nifi-1.15.3/conf/nifi.properties\"\n        NIFI_STATE_FILE=\"/opt/nifi-1.15.3/conf/state-management.xml\"\n        NIFI_AUTHZ_FILE=\"//opt/nifi-1.15.3/conf/authorizers.xml\"\n        NIFI_BOOTSTRAP_FILE=\"//opt/nifi-1.15.3/conf/bootstrap.conf\"\n       \n        KEYSTORE_PASSWORD=testtesttest\n        KEY_PASSWORD=testtesttest\n        TRUSTSTORE_PASSWORD=testtesttest\n\n        prop_replace 'nifi.web.http.port'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.http.host'                 ''                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.port'                \"${NIFI_WEB_HTTPS_PORT:-8443}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.web.https.host'                \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.remote.input.http.enabled'     'true'                                                         \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'      'nifi-zookeeper:2181'                               \"${NIFI_CONFIG_FILE}\"\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"nifi-zookeeper:2181\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n\n        prop_replace 'nifi.security.keystore'                       \"/opt/nifi-1.15.3/conf/keystore.jks\"       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystoreType'                   \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keystorePasswd'                 \"${KEYSTORE_PASSWORD}\"                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.keyPasswd'                      \"${KEY_PASSWORD}\"                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststore'                     \"/opt/nifi-1.15.3/conf/truststore.jks\"     \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststoreType'                 \"JKS\"                                                               \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.truststorePasswd'               \"${TRUSTSTORE_PASSWORD}\"                                           \"${NIFI_CONFIG_FILE}\"\n        \n        prop_replace 'nifi.sensitive.props.key'                     'hggjgjgjggewzQjhajhfaf='                                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.login.identity.provider'   ''                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.security.user.authorizer'                'managed-authorizer'                                                \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.cluster.is.node'                         'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.protocol.is.secure'              'true'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.address'                    \"${NIFI_WEB_HTTPS_HOST:-$HOSTNAME}\"                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.protocol.port'              '9876'                                                              \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.zookeeper.connect.string'                'nifi-zookeeper:2181'                                    \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.flow.election.max.wait.time'     '30 sec'                                                            \"${NIFI_CONFIG_FILE}\"\n\n        prop_replace 'nifi.flowfile.repository.directory'              '/mnt/disks/nifi-repo/flowfile_repository'                          \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.content.repository.directory.default'       '/mnt/disks/nifi-repo/content_repository'                           \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.directory.default'    '/mnt/disks/nifi-repo/provenance_repository'                        \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.status.repository.questdb.persist.location' '/mnt/disks/nifi-repo/status_repository'                            \"${NIFI_CONFIG_FILE}\"\n        #prop_replace 'nifi.queue.swap.threshold' '50000'                                                                                  \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.provenance.repository.max.storage.time' '7 days'                                                                \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.connection.timeout' '10 sec'                                                                       \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'nifi.cluster.node.read.timeout' '10 sec'                                                                             \"${NIFI_CONFIG_FILE}\"\n        prop_replace 'java.arg.2'              '-Xms4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n        prop_replace 'java.arg.3'              '-Xmx4g'                          \"${NIFI_BOOTSTRAP_FILE}\"\n         \n        sed -i -e 's|# nifi.security.identity.mapping.pattern.dn=.*|nifi.security.identity.mapping.pattern.dn=CN=(.*), OU=.*|'                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.value.dn=.*|nifi.security.identity.mapping.value.dn=$1|'                                                          ${NIFI_CONFIG_FILE}\n        sed -i -e 's|# nifi.security.identity.mapping.transform.dn=NONE|nifi.security.identity.mapping.transform.dn=NONE|'                                              ${NIFI_CONFIG_FILE}\n        \n        sed -i -e 's|\u003cproperty name=\"Initial User Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial User Identity 0\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                  ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Initial Admin Identity\"\u003e\u003c/property\u003e|\u003cproperty name=\"Initial Admin Identity\"\u003e'\"bh-nifi\"'\u003c/property\u003e|'                    ${NIFI_AUTHZ_FILE}\n        sed -i -e 's|\u003cproperty name=\"Node Identity 1\"\u003e\u003c/property\u003e|\u003cproperty name=\"Node Identity 1\"\u003e'\"nifi-1\"'\u003c/property\u003e|'                              ${NIFI_AUTHZ_FILE}\n        \n        for i in $(seq 2 3); do\n            sed -i -e '/\u003cproperty name=\"Node Identity 1\"\u003e.*/a \u003cproperty name=\"Node Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n        for i in $(seq 1 3); do\n            sed -i -e '/\u003cproperty name=\"Initial User Identity 0\"\u003e.*/a \u003cproperty name=\"Initial User Identity '\"$i\"'\"\u003e'\"nifi-$i\"'\u003c/property\u003e'                             ${NIFI_AUTHZ_FILE}\n        done\n\n        head -n -11 ${NIFI_AUTHZ_FILE} \u003e /tmp/authorizers.xml\n        echo '\u003c/authorizers\u003e' \u003e\u003e /tmp/authorizers.xml\n        mv /tmp/authorizers.xml ${NIFI_AUTHZ_FILE}\n        chown nifi:nifi ${NIFI_AUTHZ_FILE} \n       \n        tmp=\"\"\n        for i in $(seq 1 3); do\n            tmp+=nifi-zookeeper-$i:2181,\n        done\n        sed -i -e 's|\u003cproperty name=\"Connect String\"\u003e.*\u003c/property\u003e|\u003cproperty name=\"Connect String\"\u003e'\"$tmp\"'\u003c/property\u003e|'                        ${NIFI_STATE_FILE}\n       \n        prop_replace 'nifi.zookeeper.connect.string'     \"$tmp\"                                                                                 \"${NIFI_CONFIG_FILE}\"\n  \n        gsutil -m cp -r gs://nifi-binaries-safshari/core-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/core-site.xml\n\n        gsutil -m cp -r gs://nifi-binaries-safshari/hdfs-site.xml /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/hdfs-site.xml\n\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/flow.xml.gz /opt/nifi-1.15.3/conf\n        chown -R nifi:nifi /opt/nifi-1.15.3/conf/flow.xml.gz\n\n        gsutil -q stat gs://nifi-binaries-safshari/*.keytab\n        ret=$?\n        if [ $ret = 0 ];\n        then\n          gsutil -m cp -r gs://nifi-binaries-safshari/*.keytab /opt/nifi-1.15.3/conf\n          chown -R nifi:nifi /opt/nifi-1.15.3/conf/*.keytab\n        fi\n        \n        gsutil -m cp -r gs://nifi-binaries-safshari/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar /opt/nifi-1.15.3/lib/\n        chown -R nifi:nifi /opt/nifi-1.15.3/lib/nifi-GetHDFSFileCheckSum-nar-1.15.3.nar\n\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh start'\n        sleep 1m\n        su nifi -c 'rm /opt/nifi-1.15.3/conf/authorizations.xml /opt/nifi-1.15.3/conf/users.xml'\n        touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n    \n      fi\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 bash /opt/nifi-1.15.3/bin/nifi.sh restart'\n      \n",
            "min_cpu_platform": "",
            "name": "nifi-3",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.14",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-3",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform",
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "nifi-host"
            ],
            "tags_fingerprint": "7OGjTSZ4ELE=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_disk.nifi-disk-",
            "google_compute_instance.nifi-ca",
            "google_compute_instance.zookeeper",
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "nifi-ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-ca"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-ca",
            "instance_id": "2916699323070527910",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "f1-micro",
            "metadata": null,
            "metadata_fingerprint": "6YciYgiGk5w=",
            "metadata_startup_script": "        if [[ ! -f /opt/startup-script-finished.txt ]]\n        then \n            if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n            yum install  /opt/unzip*.rpm -y\n            else \n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n            apt-get install /opt/unzip*.deb -y\n            fi\n                \n            NIFI_UID=10000\n            NIFI_GID=10000\n\n            groupadd -g ${NIFI_GID} nifi || groupmod -n nifi `getent group ${NIFI_GID} | cut -d: -f1` \\\n                \u0026\u0026 useradd --shell /bin/bash -u ${NIFI_UID} -g ${NIFI_GID} -m nifi \\\n                \u0026\u0026 mkdir -p /opt \\\n                \n            mkdir -p /usr/lib/jvm/tmp-jdk\n            gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n            cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n            rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n            cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n            chmod -R a+x  /usr/lib/jvm/\n            chown -R nifi:nifi /usr/lib/jvm/\n            echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc\n            echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc\n            gsutil cp gs://nifi-binaries-safshari/binaries/nifi-toolkit-1.15.3-bin.zip /opt\n            unzip /opt/nifi-toolkit-1.15.3-bin.zip -d /opt\n            rm /opt/nifi-toolkit-1.15.3-bin.zip\n            chown nifi:nifi -R /opt/*\n            find /opt -type f -iname \"*.sh\" -exec chmod +x {} \\;\n            touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n        fi\n        su nifi -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/nifi \u0026\u0026 /opt/nifi-toolkit-1.15.3/bin/tls-toolkit.sh server -c nifi-ca -t ThisPasswordIsNotSecure \u0026'\n        sleep 10\n        cd /root\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 /opt/nifi-toolkit-1.15.3/bin/tls-toolkit.sh client -D CN=bh-nifi,OU=NIFI -c nifi-ca -t ThisPasswordIsNotSecure\n        KEYSTORE_PASSWORD=`cat config.json | grep -o '\"keyStorePassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n        KEY_PASSWORD=`cat config.json | grep -o '\"keyPassword\" : \"[^\"]*' | grep -o '[^\"]*$'`\n        export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 keytool -importkeystore -srckeystore keystore.jks -destkeystore keystore.p12 -srcstoretype jks -deststoretype pkcs12 -deststorepass $KEYSTORE_PASSWORD -srcstorepass $KEYSTORE_PASSWORD\n\n        gsutil cp keystore.p12  gs://nifi-binaries-safshari/bastionhost/\n        gsutil cp config.json gs://nifi-binaries-safshari/bastionhost/\n        rm nifi-cert.pem truststore.jks keystore.jks keystore.p12 config.json\n\n",
            "min_cpu_platform": "",
            "name": "nifi-ca",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.10",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-ca",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "nifi-ca"
            ],
            "tags_fingerprint": "W6hAMTYlYPE=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "zookeeper",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-zookeeper-1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-1",
            "instance_id": "8586558742273571238",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "f1-micro",
            "metadata": null,
            "metadata_fingerprint": "6omy44CFXh0=",
            "metadata_startup_script": "        if [[ ! -f /opt/startup-script-finished.txt ]]\n        then \n            if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n            yum install  /opt/unzip*.rpm -y\n            else \n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n            apt-get install /opt/unzip*.deb -y\n            fi\n        \n            ZOOK_UID=10000\n            ZOOK_GID=10000\n\n            groupadd -g ${ZOOK_GID} zookeeper || groupmod -n zookeeper `getent group ${ZOOK_GID} | cut -d: -f1` \\\n                \u0026\u0026 useradd --shell /bin/bash -u ${ZOOK_UID} -g ${ZOOK_GID} -m zookeeper \\\n                \u0026\u0026 mkdir -p /opt/zookeeper \\\n                \u0026\u0026 mkdir -p /var/lib/zookeeper \\\n                \u0026\u0026 echo 1 \u003e /var/lib/zookeeper/myid \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /opt/zookeeper \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /var/lib/zookeeper \n                \n            mkdir -p /usr/lib/jvm/tmp-jdk\n            gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n            cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n            rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n            cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n            chmod -R a+x  /usr/lib/jvm/\n            chown -R zookeeper:zookeeper /usr/lib/jvm/\n            echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc\n            echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc\n            chown -R zookeeper:zookeeper /opt/zookeeper/\n            gsutil -m cp -r gs://nifi-binaries-safshari/binaries/apache-zookeeper-3.8.0-bin.tar.gz /opt/zookeeper\n            cd /opt/zookeeper \u0026\u0026 tar -xzvf /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            rm /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            chown -R zookeeper:zookeeper /opt/zookeeper/*\n            find /opt/zookeeper -type f -iname \"*.sh\" -exec chmod +x {} \\;\n            echo \"tickTime=2000\" \u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"dataDir=/var/lib/zookeeper\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"clientPort=2181\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"initLimit=5\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"syncLimit=2\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo 1\n            echo \"here was test\"\n            for i in $(seq 1 3); do\n                if [[ $i == 1 ]]; then\n                    echo \"server.$i=0.0.0.0:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                else\n                    echo \"server.$i=nifi-zookeeper-$i:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                fi\n            done\n            chown -R zookeeper:zookeeper /opt/zookeeper/apache-zookeeper-3.8.0-bin/\n            touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n        fi\n        su zookeeper -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/zookeeper \u0026\u0026 /opt/zookeeper/apache-zookeeper-3.8.0-bin/bin/zkServer.sh start'\n    \n",
            "min_cpu_platform": "",
            "name": "nifi-zookeeper-1",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.12",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-1",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "zookeeper"
            ],
            "tags_fingerprint": "mZlTOsHGdJM=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-zookeeper-2"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-2",
            "instance_id": "2102432893081860518",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "f1-micro",
            "metadata": null,
            "metadata_fingerprint": "Cwpkmp2BMlA=",
            "metadata_startup_script": "        if [[ ! -f /opt/startup-script-finished.txt ]]\n        then \n            if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n            yum install  /opt/unzip*.rpm -y\n            else \n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n            apt-get install /opt/unzip*.deb -y\n            fi\n        \n            ZOOK_UID=10000\n            ZOOK_GID=10000\n\n            groupadd -g ${ZOOK_GID} zookeeper || groupmod -n zookeeper `getent group ${ZOOK_GID} | cut -d: -f1` \\\n                \u0026\u0026 useradd --shell /bin/bash -u ${ZOOK_UID} -g ${ZOOK_GID} -m zookeeper \\\n                \u0026\u0026 mkdir -p /opt/zookeeper \\\n                \u0026\u0026 mkdir -p /var/lib/zookeeper \\\n                \u0026\u0026 echo 2 \u003e /var/lib/zookeeper/myid \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /opt/zookeeper \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /var/lib/zookeeper \n                \n            mkdir -p /usr/lib/jvm/tmp-jdk\n            gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n            cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n            rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n            cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n            chmod -R a+x  /usr/lib/jvm/\n            chown -R zookeeper:zookeeper /usr/lib/jvm/\n            echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc\n            echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc\n            chown -R zookeeper:zookeeper /opt/zookeeper/\n            gsutil -m cp -r gs://nifi-binaries-safshari/binaries/apache-zookeeper-3.8.0-bin.tar.gz /opt/zookeeper\n            cd /opt/zookeeper \u0026\u0026 tar -xzvf /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            rm /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            chown -R zookeeper:zookeeper /opt/zookeeper/*\n            find /opt/zookeeper -type f -iname \"*.sh\" -exec chmod +x {} \\;\n            echo \"tickTime=2000\" \u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"dataDir=/var/lib/zookeeper\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"clientPort=2181\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"initLimit=5\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"syncLimit=2\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo 2\n            echo \"here was test\"\n            for i in $(seq 1 3); do\n                if [[ $i == 2 ]]; then\n                    echo \"server.$i=0.0.0.0:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                else\n                    echo \"server.$i=nifi-zookeeper-$i:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                fi\n            done\n            chown -R zookeeper:zookeeper /opt/zookeeper/apache-zookeeper-3.8.0-bin/\n            touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n        fi\n        su zookeeper -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/zookeeper \u0026\u0026 /opt/zookeeper/apache-zookeeper-3.8.0-bin/bin/zkServer.sh start'\n    \n",
            "min_cpu_platform": "",
            "name": "nifi-zookeeper-2",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.11",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-2",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "zookeeper"
            ],
            "tags_fingerprint": "mZlTOsHGdJM=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20220419",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/disks/nifi-zookeeper-3"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-3",
            "instance_id": "7709418560916666789",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "f1-micro",
            "metadata": null,
            "metadata_fingerprint": "xIH4Zq7QQ98=",
            "metadata_startup_script": "        if [[ ! -f /opt/startup-script-finished.txt ]]\n        then \n            if [[ \"ubuntu-1804-bionic-v20220419\" == *\"centos\"* ]]; then\n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.rpm /opt\n            yum install  /opt/unzip*.rpm -y\n            else \n            gsutil cp  gs://nifi-binaries-safshari/binaries/unzip*.deb /opt\n            apt-get install /opt/unzip*.deb -y\n            fi\n        \n            ZOOK_UID=10000\n            ZOOK_GID=10000\n\n            groupadd -g ${ZOOK_GID} zookeeper || groupmod -n zookeeper `getent group ${ZOOK_GID} | cut -d: -f1` \\\n                \u0026\u0026 useradd --shell /bin/bash -u ${ZOOK_UID} -g ${ZOOK_GID} -m zookeeper \\\n                \u0026\u0026 mkdir -p /opt/zookeeper \\\n                \u0026\u0026 mkdir -p /var/lib/zookeeper \\\n                \u0026\u0026 echo 3 \u003e /var/lib/zookeeper/myid \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /opt/zookeeper \\\n                \u0026\u0026 chown -R zookeeper:zookeeper /var/lib/zookeeper \n                \n            mkdir -p /usr/lib/jvm/tmp-jdk\n            gsutil -m cp -r  gs://nifi-binaries-safshari/binaries/openjdk-11+28_linux-x64_bin.tar.gz /usr/lib/jvm/\n            cd /usr/lib/jvm/ \u0026\u0026 tar -xzvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/lib/jvm/\n            rm -f /usr/lib/jvm/openjdk-11+28_linux-x64_bin.tar.gz\n            cp -R /usr/lib/jvm/jdk*/* /usr/lib/jvm/tmp-jdk \u0026\u0026 rm -R -f /usr/lib/jvm/jdk* \u0026\u0026 mv /usr/lib/jvm/tmp-jdk /usr/lib/jvm/jdk \n            chmod -R a+x  /usr/lib/jvm/\n            chown -R zookeeper:zookeeper /usr/lib/jvm/\n            echo \"export JAVA_HOME=/usr/lib/jvm/jdk\" \u003e\u003e ~/.bashrc\n            echo \"export PATH=$PATH:/usr/lib/jvm/jdk/bin\" \u003e\u003e ~/.bashrc\n            chown -R zookeeper:zookeeper /opt/zookeeper/\n            gsutil -m cp -r gs://nifi-binaries-safshari/binaries/apache-zookeeper-3.8.0-bin.tar.gz /opt/zookeeper\n            cd /opt/zookeeper \u0026\u0026 tar -xzvf /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            rm /opt/zookeeper/apache-zookeeper-3.8.0-bin.tar.gz\n            chown -R zookeeper:zookeeper /opt/zookeeper/*\n            find /opt/zookeeper -type f -iname \"*.sh\" -exec chmod +x {} \\;\n            echo \"tickTime=2000\" \u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"dataDir=/var/lib/zookeeper\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"clientPort=2181\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"initLimit=5\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo \"syncLimit=2\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n            echo 3\n            echo \"here was test\"\n            for i in $(seq 1 3); do\n                if [[ $i == 3 ]]; then\n                    echo \"server.$i=0.0.0.0:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                else\n                    echo \"server.$i=nifi-zookeeper-$i:2888:3888\" \u003e\u003e /opt/zookeeper/apache-zookeeper-3.8.0-bin/conf/zoo.cfg\n                fi\n            done\n            chown -R zookeeper:zookeeper /opt/zookeeper/apache-zookeeper-3.8.0-bin/\n            touch /opt/startup-script-finished.txt \u0026\u0026 echo \"the startup script run once\" \u003e /opt/startup-script-finished.txt\n        fi\n        su zookeeper -c 'export PATH=$PATH:/usr/lib/jvm/jdk/bin \u0026\u0026 cd /home/zookeeper \u0026\u0026 /opt/zookeeper/apache-zookeeper-3.8.0-bin/bin/zkServer.sh start'\n    \n",
            "min_cpu_platform": "",
            "name": "nifi-zookeeper-3",
            "network_interface": [
              {
                "access_config": [],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
                "network_ip": "10.138.0.13",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
                "subnetwork_project": "safshari-sandbox"
              }
            ],
            "project": "safshari-sandbox",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/zones/us-west1-a/instances/nifi-zookeeper-3",
            "service_account": [
              {
                "email": "999534563257-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "zookeeper"
            ],
            "tags_fingerprint": "mZlTOsHGdJM=",
            "timeouts": null,
            "zone": "us-west1-a"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.default",
            "google_compute_subnetwork.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": false,
            "delete_default_routes_on_create": false,
            "description": "",
            "gateway_ipv4": "",
            "id": "projects/safshari-sandbox/global/networks/nifi-network",
            "mtu": 0,
            "name": "nifi-network",
            "project": "safshari-sandbox",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-05-26T15:34:32.604-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.138.0.1",
            "id": "projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
            "ip_cidr_range": "10.138.0.0/20",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "nifi-network-subnet",
            "network": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/global/networks/nifi-network",
            "private_ip_google_access": true,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "safshari-sandbox",
            "purpose": "PRIVATE",
            "region": "us-west1",
            "role": "",
            "secondary_ip_range": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/safshari-sandbox/regions/us-west1/subnetworks/nifi-network-subnet",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.default"
          ]
        }
      ]
    }
  ]
}
